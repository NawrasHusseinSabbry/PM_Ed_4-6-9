#include <Arduino.h>
#include <avr/io.h>
#include <stdlib.h>
#include <avr/pgmspace.h>

#define add Ed25519_add
#define sub Ed25519_sub
#define modulo Ed25519_modulo

typedef struct { unsigned char Ed[32]; } field_element;

extern "C"
{
  void sub(field_element *r, const field_element *x, const field_element *y);
  void add(field_element *r, const field_element *x, const field_element *y);
  void modulo(field_element *r, unsigned char *C);
  char Ed_num_sub_prime(unsigned char* r, const unsigned char* a);
  char Ed25519_square(unsigned char* r, const unsigned char* a);
  char Ed_mul(unsigned char* r, const unsigned char* a, const unsigned char* b);
  unsigned char scalar_sub_halforder(unsigned char* r, const unsigned char* a);
  unsigned char scalar_sub_order(unsigned char* r, const unsigned char* a);
  char Ed255_subp_bigint(unsigned char* r, const unsigned char* a);
}

void in_range(field_element *r);
void Ed25519_scalar_sub_order(field_element *r);
void flip_if(field_element *r, const field_element *x, unsigned char b);
void mul(field_element *r, const field_element *x, const field_element *y);
void square(field_element *r, const field_element *x);
void M_Inverse_Z(field_element *r, const field_element *x);

static const field_element d = {{0xA3, 0x78, 0x59, 0x13, 0xCA, 0x4D, 0xEB, 0x75, 0xAB, 0xD8, 0x41, 0x41, 0x4D, 0x0A, 0x70, 0x00, 0x98, 0xE8, 0x79, 0x77, 0x79, 0x40, 0xC7, 0x8C, 0x73, 0xFE, 0x6F, 0x2B, 0xEE, 0x6C, 0x03, 0x52}};
static const field_element a = {{0xEC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F}};

static const field_element PRECOMPUTED_POINTS[65][3] PROGMEM = {
  {{0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00},
  {0x01, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00},
  {0x01, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00}},
  {{0x1A, 0xD5, 0x25, 0x8F, 0x60, 0x2D, 0x56, 0xC9, 0xB2, 0xA7, 0x25, 0x95, 0x60, 0xC7, 0x2C, 0x69, 0x5C, 0xDC, 0xD6, 0xFD, 0x31, 0xE2, 0xA4, 0xC0, 0xFE, 0x53, 0x6E, 0xCD, 0xD3, 0x36, 0x69, 0x21},
   {0x58, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66},
   {0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
  {{0x57, 0x0A, 0x30, 0x18, 0x4C, 0x86, 0xBA, 0x7A, 0x5B, 0x62, 0x71, 0xFA, 0xDD, 0xC1, 0x6E, 0x88, 0x09, 0xF9, 0xB0, 0xB7, 0x87, 0x4B, 0x22, 0xEA, 0x4A, 0x25, 0x7C, 0x9A, 0xDB, 0x1D, 0x24, 0x31},
   {0xD7, 0x7F, 0x2D, 0x5E, 0xD9, 0x2C, 0x4B, 0x92, 0x1C, 0x32, 0xBE, 0x2B, 0x66, 0xAA, 0x47, 0x0A, 0xF6, 0x51, 0xC9, 0x3A, 0xFC, 0x82, 0xB7, 0x69, 0xDB, 0x33, 0xC9, 0x6C, 0x4C, 0x98, 0x24, 0x33},
   {0x6B, 0xDE, 0x78, 0x02, 0x3D, 0xA9, 0x74, 0x63, 0xD1, 0x99, 0x92, 0x33, 0x00, 0x61, 0xD3, 0xEB, 0x92, 0x62, 0x42, 0x3B, 0xFA, 0xD1, 0x98, 0x40, 0x57, 0x7C, 0x57, 0x6B, 0x79, 0xC5, 0x86, 0x69}},
  {{0x85, 0x99, 0xEB, 0xC9, 0xB1, 0x53, 0x37, 0xC2, 0x4E, 0xAF, 0x4B, 0x52, 0x8F, 0x6B, 0xA0, 0x90, 0xF3, 0xB1, 0xC6, 0x35, 0x53, 0xA9, 0x4A, 0xCE, 0x13, 0x7E, 0x6B, 0x77, 0xBC, 0x2F, 0x8E, 0x6B},
   {0x64, 0x76, 0xEC, 0x03, 0x88, 0xF6, 0x75, 0xDF, 0xEE, 0x52, 0xF7, 0xA9, 0x12, 0xF1, 0x9D, 0x0B, 0x17, 0x02, 0x16, 0x67, 0xE7, 0x8C, 0x58, 0x65, 0x78, 0xFF, 0xBF, 0x0C, 0x7C, 0x31, 0x9A, 0x16},
   {0xE9, 0xD8, 0x02, 0x1D, 0x63, 0x4B, 0x5F, 0x8B, 0x01, 0x91, 0x3F, 0x05, 0x9B, 0x69, 0xBD, 0x7C, 0x85, 0x14, 0x7B, 0xC4, 0xB0, 0x65, 0x99, 0xE7, 0x65, 0x55, 0x8F, 0xA6, 0x98, 0xBE, 0xE9, 0x61}},
  {{0x95, 0x05, 0x02, 0xE9, 0x8E, 0xA7, 0xAD, 0x05, 0xDB, 0x30, 0x01, 0x98, 0x1B, 0xE1, 0x3E, 0xD8, 0xBB, 0x7F, 0xF7, 0x52, 0x34, 0xBF, 0x3F, 0xE9, 0x95, 0x9F, 0xD1, 0x92, 0x90, 0xE2, 0xD6, 0x7A},
   {0xDC, 0x08, 0xB3, 0x80, 0x79, 0x52, 0x3C, 0x4C, 0x0F, 0x29, 0x4C, 0xC4, 0xD6, 0x3D, 0x64, 0xBE, 0x4D, 0x48, 0x9F, 0xEA, 0x85, 0x11, 0xD8, 0x39, 0x35, 0xAD, 0x90, 0x00, 0xAE, 0x83, 0xC9, 0x12},
   {0xB8, 0xEB, 0x15, 0x44, 0x11, 0x3C, 0x49, 0xE2, 0xC2, 0xDC, 0x77, 0x4C, 0xD6, 0x9A, 0x50, 0xDC, 0xFF, 0xB8, 0xD8, 0xA0, 0xD8, 0xD0, 0x48, 0x15, 0xB1, 0xDD, 0x0A, 0x32, 0x96, 0x6B, 0x6E, 0x78}},
  {{0x1D, 0xDE, 0xB6, 0x92, 0xCA, 0x24, 0xF5, 0x02, 0x25, 0x98, 0xF1, 0x0F, 0x16, 0x40, 0x12, 0xEA, 0xEC, 0xF3, 0x1B, 0xA1, 0x79, 0x8E, 0xC2, 0x39, 0x59, 0x7E, 0x68, 0xD6, 0xF9, 0x63, 0xE1, 0x3D},
   {0x22, 0x15, 0x90, 0x17, 0x59, 0x93, 0xCF, 0xA8, 0xC5, 0xF2, 0x8E, 0xFB, 0x53, 0xC5, 0xA3, 0x24, 0x79, 0xEE, 0xD6, 0x84, 0x80, 0x7D, 0x0F, 0x8F, 0x39, 0xFA, 0x6F, 0xE4, 0x03, 0x4C, 0x62, 0x3E},
   {0x3E, 0x00, 0x27, 0x17, 0xA5, 0x99, 0xD7, 0x73, 0x85, 0xDB, 0x24, 0x84, 0xD4, 0xE0, 0x2D, 0x3F, 0x0F, 0x14, 0x45, 0x44, 0xC8, 0xFC, 0xB2, 0x85, 0x61, 0xE0, 0xAC, 0x0C, 0xD5, 0xF8, 0x99, 0x7A}},
  {{0xF1, 0xE2, 0x5B, 0x3B, 0xB9, 0x62, 0xB3, 0xDC, 0xD9, 0xF4, 0x72, 0x5F, 0xD2, 0xF5, 0x70, 0x7F, 0x39, 0xA6, 0x5C, 0xB6, 0x85, 0xC7, 0x73, 0x84, 0xCB, 0x22, 0x18, 0xF1, 0x08, 0x49, 0xDD, 0x19},
   {0xCA, 0x04, 0x83, 0x31, 0xB9, 0x7F, 0x14, 0x21, 0xBC, 0xF4, 0x55, 0x93, 0x9E, 0x78, 0x8B, 0x04, 0xCF, 0xF0, 0x20, 0x9E, 0x70, 0xBC, 0xB7, 0xEA, 0xE2, 0xAF, 0x6D, 0x4A, 0x2B, 0x34, 0x5F, 0x4D},
   {0x81, 0x1D, 0x45, 0x5B, 0x8D, 0xCF, 0xEB, 0x8E, 0x2F, 0x61, 0x55, 0xFE, 0x7B, 0x64, 0x05, 0x34, 0xB0, 0x83, 0x08, 0xEB, 0xB1, 0x5C, 0xD5, 0x52, 0x0B, 0x21, 0xED, 0xED, 0x7C, 0x6B, 0xC0, 0x2C}},
  {{0xBA, 0xDB, 0xD3, 0xBE, 0x60, 0x7E, 0xB1, 0x89, 0xE0, 0x81, 0x48, 0x66, 0xB7, 0x51, 0x3F, 0xAC, 0x9B, 0x18, 0x86, 0x1D, 0x6D, 0x7E, 0x2E, 0x54, 0xCC, 0x11, 0x65, 0x22, 0xFA, 0x4B, 0xDB, 0x6D},
   {0x7B, 0xC4, 0x14, 0x49, 0xE2, 0x14, 0x87, 0xBB, 0xE0, 0x1C, 0x1B, 0x8D, 0xAA, 0xD6, 0x9C, 0x36, 0x28, 0x5C, 0xAC, 0x24, 0x8B, 0x6B, 0x51, 0xB0, 0x3C, 0x6C, 0xC1, 0x7B, 0x8C, 0xC6, 0x95, 0x0C},
   {0x7A, 0xDC, 0xC5, 0x25, 0xB9, 0x87, 0x89, 0xE7, 0x01, 0x96, 0x45, 0x96, 0x3D, 0x32, 0x28, 0xAE, 0x0D, 0x37, 0x80, 0x44, 0xE3, 0xC4, 0x0C, 0x65, 0x37, 0xF0, 0x62, 0xE8, 0x82, 0x5B, 0x34, 0x72}},
  {{0xDA, 0xB5, 0x9D, 0xD9, 0x91, 0x10, 0x80, 0xA0, 0x58, 0xA6, 0xEC, 0xEA, 0x67, 0x15, 0xD5, 0x63, 0x33, 0xF0, 0xFB, 0xC0, 0xE6, 0x64, 0xE2, 0xB8, 0x88, 0x50, 0x8F, 0xAE, 0xDA, 0x89, 0x13, 0x61},
   {0x2F, 0x58, 0x70, 0xEF, 0x27, 0x1F, 0x15, 0xD1, 0x14, 0xE5, 0xE9, 0xFB, 0xA0, 0xAE, 0xE6, 0x05, 0x31, 0xA8, 0x4E, 0xA4, 0x59, 0x41, 0x0F, 0x17, 0xCF, 0xA9, 0x36, 0xF4, 0x72, 0x3B, 0x59, 0x00},
   {0xEF, 0x7D, 0x91, 0x5C, 0xB3, 0x43, 0xF7, 0xB8, 0xBF, 0xBC, 0x6E, 0x5A, 0x87, 0x73, 0xF3, 0xF6, 0x72, 0x75, 0x80, 0x67, 0xB1, 0x8E, 0x70, 0xB0, 0xE5, 0xB8, 0x45, 0x30, 0xC2, 0xE5, 0x21, 0x55}},
  {{0x49, 0x9D, 0xA0, 0x31, 0xF7, 0x0D, 0x46, 0x40, 0xF5, 0xC4, 0x30, 0xC4, 0x07, 0x16, 0xDE, 0x0F, 0xE7, 0x91, 0x2D, 0x96, 0xCB, 0x4E, 0x6D, 0x00, 0x67, 0x70, 0xCC, 0x80, 0x69, 0x08, 0x37, 0x64},
   {0x72, 0x13, 0x73, 0xF3, 0x92, 0x59, 0x16, 0x52, 0x72, 0x27, 0xA1, 0x36, 0x5C, 0x47, 0x12, 0x15, 0x08, 0x9D, 0xF2, 0x49, 0xF3, 0x97, 0xC9, 0x43, 0x25, 0xD1, 0xA5, 0x11, 0xA8, 0xB5, 0xE7, 0x43},
   {0xD9, 0xF1, 0xE2, 0x1D, 0x79, 0x0D, 0x60, 0xE1, 0xAA, 0xAC, 0x30, 0x3C, 0x01, 0x91, 0xFA, 0xC8, 0x31, 0xBE, 0xDA, 0xE3, 0x03, 0x11, 0x16, 0xBF, 0x18, 0x1A, 0x5A, 0x82, 0x4B, 0x2E, 0x25, 0x30}},
  {{0x1D, 0x7C, 0x07, 0x8D, 0x98, 0x5B, 0xD8, 0xC7, 0xFE, 0x69, 0x1C, 0x7E, 0xF7, 0x20, 0xED, 0xAD, 0x0E, 0x9D, 0xA7, 0x6E, 0x42, 0x21, 0xBE, 0xC0, 0xC4, 0x41, 0x5E, 0x72, 0xAE, 0x1A, 0x59, 0x72},
   {0x11, 0xFA, 0xA7, 0xB5, 0x7F, 0x3D, 0x1E, 0xB8, 0x59, 0xE2, 0x2E, 0x09, 0x7F, 0x77, 0xC1, 0xC6, 0x9D, 0x57, 0x25, 0xC5, 0x9F, 0xD0, 0xBC, 0x59, 0xA0, 0xC3, 0x9B, 0x50, 0xEB, 0x69, 0x73, 0x02},
   {0x98, 0x1E, 0x1B, 0xF5, 0x8C, 0x5E, 0xD9, 0xCE, 0x7D, 0x1D, 0x6D, 0x8C, 0xA5, 0xA9, 0x9E, 0x7B, 0x82, 0x83, 0xB2, 0xCF, 0x14, 0x44, 0x9B, 0x81, 0x9D, 0x33, 0x3A, 0x3A, 0xF2, 0xF6, 0x4F, 0x01}},
  {{0x75, 0x71, 0xD7, 0xF5, 0xBC, 0x48, 0x93, 0x70, 0x47, 0x1D, 0xA7, 0x02, 0x1F, 0x34, 0x51, 0x68, 0x46, 0x87, 0xEC, 0xF6, 0xF9, 0x95, 0x59, 0x75, 0x98, 0x4E, 0xBF, 0x57, 0x1D, 0x9A, 0xA0, 0x54},
   {0x61, 0xA9, 0x3F, 0xF6, 0x9F, 0xEE, 0x05, 0x2A, 0xA5, 0xFC, 0x8A, 0x43, 0xD7, 0x4B, 0x29, 0x64, 0x56, 0x7B, 0x20, 0x86, 0x10, 0xBF, 0x71, 0xCE, 0x05, 0xD4, 0x9B, 0x72, 0x59, 0xAA, 0x18, 0x31},
   {0xE2, 0xEA, 0xEF, 0xFB, 0xF6, 0x7B, 0x24, 0xD0, 0x53, 0x63, 0x5C, 0xAC, 0x36, 0x28, 0x97, 0x13, 0x77, 0xF8, 0xDB, 0x25, 0x03, 0x43, 0xAA, 0x58, 0x66, 0x98, 0x2D, 0x83, 0x64, 0xC8, 0xD2, 0x09}},
  {{0xC7, 0x40, 0x06, 0x6A, 0xD7, 0x47, 0x1E, 0xAF, 0x9A, 0xF5, 0xDD, 0x67, 0xA0, 0x9A, 0x97, 0x6B, 0x03, 0x07, 0xA1, 0x15, 0x9B, 0x91, 0xD5, 0x13, 0x29, 0x5B, 0x43, 0x96, 0xC7, 0x63, 0x3D, 0x56},
   {0x91, 0x32, 0x6F, 0xAB, 0xED, 0xFE, 0xCB, 0x35, 0x25, 0x9A, 0x98, 0xE1, 0x55, 0xCD, 0xD0, 0xCF, 0x1B, 0x9C, 0x6E, 0x5F, 0x54, 0x97, 0xEE, 0xEA, 0x7A, 0x50, 0x01, 0xDD, 0x90, 0x4F, 0x5A, 0x7E},
   {0x25, 0x83, 0x96, 0x1C, 0x91, 0xB1, 0x46, 0xE1, 0xB0, 0x13, 0xF1, 0xE5, 0xDA, 0xB5, 0x91, 0xE4, 0xB6, 0x60, 0x88, 0xD1, 0x1C, 0x8E, 0xDC, 0x18, 0x28, 0x73, 0x1D, 0xED, 0xBB, 0xC4, 0xE7, 0x6E}},
  {{0xDE, 0x09, 0x6D, 0x35, 0xE4, 0xB1, 0x43, 0xD9, 0x3F, 0xD2, 0x10, 0x1E, 0xA0, 0x15, 0x96, 0xAC, 0xC7, 0x8A, 0x55, 0x50, 0xE6, 0xDC, 0xFA, 0x18, 0x3C, 0x15, 0xF7, 0xE5, 0x6C, 0x67, 0x34, 0x0B},
   {0xF1, 0x8C, 0xE1, 0x9F, 0x72, 0xFB, 0xC4, 0x4C, 0x7E, 0x75, 0x11, 0xBD, 0x49, 0x0A, 0x68, 0xE4, 0xC2, 0xA5, 0xC1, 0x31, 0x43, 0xEA, 0x9F, 0xBB, 0x56, 0xA2, 0x25, 0xAF, 0x8D, 0x0E, 0xDA, 0x04},
   {0x83, 0x61, 0x6B, 0x22, 0x35, 0x3B, 0x17, 0xB8, 0xA0, 0x85, 0x12, 0x88, 0x24, 0x4C, 0xB4, 0xA3, 0xFA, 0xA1, 0x7C, 0xF0, 0x9A, 0x5B, 0x03, 0x96, 0x72, 0x37, 0xE5, 0x5C, 0xEE, 0x2B, 0x85, 0x7A}},
  {{0x8B, 0x43, 0x8B, 0x72, 0xD4, 0xE4, 0x8A, 0x15, 0x77, 0x84, 0x02, 0x11, 0x50, 0xCB, 0x86, 0x7F, 0x60, 0x22, 0xFF, 0xBA, 0xCF, 0x77, 0x84, 0x0D, 0xC0, 0xA0, 0xAB, 0xE2, 0x92, 0xC4, 0x38, 0x62},
   {0x4B, 0xF2, 0xE5, 0x35, 0xA6, 0x3D, 0xEF, 0x5C, 0x96, 0xC1, 0xF3, 0x79, 0x0C, 0x54, 0x75, 0x41, 0x56, 0xC1, 0x1C, 0xB4, 0xC7, 0x03, 0x21, 0xE9, 0x93, 0xA8, 0x1D, 0xBF, 0x0C, 0x7C, 0xE9, 0x19},
   {0x13, 0xD5, 0x94, 0xAE, 0xB8, 0x9D, 0x51, 0xC6, 0x6C, 0xF6, 0x0A, 0x4F, 0xD0, 0xFD, 0xAB, 0x44, 0x78, 0x4B, 0x92, 0xBE, 0x59, 0x0D, 0xE7, 0x4D, 0x39, 0xB7, 0xE1, 0xDF, 0x2C, 0xB2, 0xB2, 0x4D}},
  {{0x06, 0xF4, 0x34, 0x02, 0x40, 0x99, 0x40, 0xB0, 0x34, 0x02, 0xFE, 0x3E, 0xA4, 0x33, 0xFC, 0xA1, 0x59, 0xCF, 0xAF, 0xD3, 0x30, 0x10, 0x26, 0x92, 0x15, 0xCC, 0xDA, 0x00, 0x83, 0x08, 0x4E, 0x2F},
   {0x43, 0xFF, 0x67, 0x41, 0x8E, 0x2F, 0xD7, 0x0E, 0x51, 0xC6, 0x53, 0xEE, 0xB0, 0xA5, 0x41, 0x12, 0xEE, 0x31, 0xB0, 0x37, 0xB1, 0xB5, 0xD7, 0xE8, 0x99, 0xA6, 0x1B, 0x1C, 0x18, 0xC4, 0x39, 0x51},
   {0x8F, 0xF1, 0x68, 0x0F, 0x22, 0x2E, 0xAE, 0xCA, 0x88, 0x6F, 0x20, 0xD8, 0x55, 0xE3, 0x9E, 0xF3, 0x35, 0xB2, 0x5C, 0xAB, 0x8B, 0x88, 0x80, 0xE4, 0x97, 0xE7, 0x38, 0x02, 0xBD, 0x5F, 0x0D, 0x58}},
  {{0x42, 0xF6, 0x3E, 0x16, 0xAD, 0x60, 0x71, 0xE2, 0x67, 0x3E, 0xC4, 0xB0, 0x05, 0xFD, 0x89, 0x6D, 0x31, 0x42, 0x53, 0x7B, 0x4F, 0x9A, 0xCC, 0xE8, 0xA0, 0x0C, 0xA1, 0x9C, 0x96, 0x73, 0xD2, 0x4D},
   {0x50, 0x2F, 0x9D, 0x2B, 0xF2, 0xE6, 0x97, 0x8D, 0x6D, 0xFD, 0xFB, 0x4B, 0xA1, 0x0B, 0x6D, 0x22, 0x5F, 0xCE, 0xC8, 0x7A, 0x15, 0x60, 0xAB, 0xE7, 0x3E, 0x92, 0xE9, 0x1F, 0x3A, 0xF7, 0xE0, 0x6F},
   {0x82, 0xBA, 0x90, 0xB6, 0x06, 0xC6, 0x60, 0x98, 0x7A, 0x8D, 0xF4, 0xD9, 0x07, 0x6E, 0xF2, 0xF5, 0xD7, 0x38, 0x0E, 0x50, 0x5C, 0x5C, 0x4F, 0x42, 0x3E, 0x37, 0x07, 0x88, 0x35, 0x05, 0xF8, 0x20}},
  {{0x24, 0x9A, 0x71, 0x29, 0xA2, 0x36, 0x23, 0x70, 0xD8, 0xE3, 0xEF, 0x87, 0x69, 0x39, 0xD8, 0x15, 0xEF, 0xD2, 0x79, 0xA8, 0xCA, 0x71, 0xE8, 0x44, 0xCD, 0x9E, 0xD2, 0x40, 0x5A, 0x12, 0x3F, 0x09},
   {0x2B, 0x1C, 0xF7, 0x3F, 0xB2, 0x33, 0x72, 0xCA, 0x73, 0xF7, 0x69, 0x33, 0xB7, 0xE1, 0x90, 0x42, 0x40, 0x30, 0x44, 0x6D, 0xDA, 0xBB, 0x77, 0x07, 0xDB, 0xA8, 0x73, 0xA5, 0x5F, 0x2D, 0x6A, 0x14},
   {0xBA, 0xD0, 0xCC, 0x81, 0x14, 0x87, 0xA0, 0x1F, 0x9C, 0x60, 0x65, 0xEF, 0x5E, 0x01, 0xC4, 0x70, 0x8D, 0xA1, 0xD7, 0x55, 0xA5, 0xE8, 0xB0, 0xB0, 0xE9, 0xDE, 0xB0, 0x60, 0x91, 0xEF, 0x40, 0x28}},
  {{0x29, 0x47, 0x81, 0xC9, 0x34, 0x4B, 0x83, 0xA5, 0x65, 0xDB, 0xFA, 0xBB, 0xE5, 0xC3, 0x42, 0xCB, 0x3F, 0x0D, 0x48, 0x71, 0x17, 0xB2, 0xB9, 0xE7, 0x96, 0xF4, 0x1F, 0xFF, 0x12, 0x2C, 0x25, 0x17},
   {0xB4, 0xFF, 0x48, 0xDB, 0x76, 0xE3, 0x51, 0x5D, 0x00, 0xE7, 0x3F, 0x4F, 0xB1, 0xF2, 0xF1, 0x4C, 0x45, 0xEA, 0xA2, 0x31, 0x2D, 0x1D, 0x20, 0xA7, 0x5B, 0xB6, 0x56, 0x1D, 0x65, 0xEA, 0x38, 0x51},
   {0x62, 0xF3, 0x64, 0xD1, 0xB1, 0xBC, 0xD7, 0x55, 0xAA, 0x5C, 0x9B, 0xFE, 0x72, 0xCC, 0xDB, 0xB6, 0x17, 0x37, 0xD0, 0x5C, 0xF6, 0xBE, 0xA8, 0xBA, 0x93, 0x5A, 0x3D, 0x5A, 0x23, 0x00, 0x14, 0x54}},
  {{0xB0, 0xC0, 0x9D, 0x82, 0x73, 0x8B, 0x88, 0x97, 0xD2, 0xFC, 0x07, 0x42, 0x48, 0x2B, 0x83, 0x7B, 0x01, 0x13, 0x62, 0xB9, 0x95, 0xA7, 0xBA, 0x8D, 0xFE, 0xB7, 0x99, 0x90, 0xFD, 0x04, 0xAF, 0x23},
   {0x95, 0x8E, 0x4C, 0x2C, 0x59, 0x2A, 0xF7, 0xA3, 0xD6, 0xB7, 0x24, 0xFF, 0xF1, 0x82, 0x46, 0xF1, 0x03, 0x53, 0x2D, 0x8C, 0xF7, 0x61, 0xC8, 0xCB, 0xE3, 0x67, 0x0C, 0x98, 0x85, 0xEC, 0xE4, 0x02},
   {0x50, 0xC1, 0x03, 0x14, 0xDF, 0xFB, 0x6C, 0xC9, 0x2D, 0x60, 0x8B, 0x8B, 0xB3, 0x81, 0x07, 0x53, 0x97, 0x31, 0x12, 0x34, 0x99, 0xCC, 0xCE, 0xDC, 0x1E, 0x65, 0xE3, 0xCE, 0xC2, 0xD8, 0xE6, 0x2C}},
  {{0xEF, 0x87, 0x2F, 0x5D, 0xF3, 0xA6, 0xE1, 0xD6, 0xEE, 0xE1, 0xD8, 0xE9, 0x45, 0x8F, 0x65, 0x8B, 0xD6, 0x46, 0x72, 0xF1, 0x09, 0x69, 0x50, 0xE0, 0x0E, 0x2F, 0x5A, 0xE3, 0x31, 0xAF, 0x71, 0x32},
   {0xF7, 0x79, 0xDF, 0x4F, 0x49, 0x58, 0x11, 0x88, 0x03, 0x88, 0x61, 0x30, 0xCD, 0x20, 0xF5, 0xF9, 0x50, 0xD1, 0x0D, 0x31, 0x94, 0x59, 0xC9, 0x4B, 0x6C, 0xAF, 0x90, 0x97, 0x69, 0x95, 0xBE, 0x0C},
   {0xDF, 0x19, 0x50, 0x7A, 0x87, 0xEA, 0x7F, 0x05, 0xF7, 0x62, 0x1E, 0x4E, 0x78, 0x7A, 0x1F, 0x6C, 0x29, 0x5E, 0xA4, 0x9C, 0x32, 0x85, 0x9D, 0x79, 0x3E, 0x1F, 0x01, 0x41, 0xB1, 0xC3, 0x43, 0x6F}},
  {{0x67, 0xF8, 0x36, 0xCF, 0x49, 0x1C, 0xFE, 0x4C, 0xF9, 0x7F, 0x66, 0x61, 0x39, 0x71, 0xB1, 0x08, 0xF1, 0x19, 0x3B, 0xB8, 0x4C, 0xE2, 0x2F, 0xB8, 0xD2, 0xF5, 0x68, 0xF1, 0x2A, 0x34, 0x99, 0x4F},
   {0x45, 0x71, 0x70, 0xA4, 0x86, 0x1B, 0x32, 0xFA, 0xEA, 0x36, 0xFC, 0x9D, 0x23, 0x84, 0xF2, 0x4B, 0x2D, 0x68, 0x8B, 0x49, 0xDD, 0xEB, 0xB0, 0xBC, 0x37, 0x3C, 0xAE, 0xBE, 0x23, 0x15, 0x57, 0x66},
   {0x25, 0x88, 0xAB, 0xD3, 0xB7, 0x9B, 0xFD, 0x05, 0x56, 0x4D, 0xBA, 0xE4, 0xB8, 0x76, 0xC4, 0x92, 0xC7, 0x1B, 0x16, 0x38, 0xEE, 0x14, 0x30, 0x04, 0x7C, 0x4B, 0x1C, 0x5D, 0x60, 0xFC, 0x68, 0x17}},
  {{0xA9, 0x9B, 0xD9, 0x5D, 0xD4, 0x0F, 0x21, 0xED, 0x25, 0x01, 0xEE, 0x98, 0xD0, 0x69, 0x02, 0x8E, 0x5D, 0xD8, 0x0D, 0xB8, 0xCA, 0x5B, 0xB2, 0x70, 0xD0, 0x70, 0x69, 0x87, 0x7A, 0x3A, 0x96, 0x54},
   {0xDE, 0xED, 0x18, 0x9B, 0x1C, 0x06, 0x13, 0x67, 0xCB, 0x3E, 0x82, 0x5B, 0x5F, 0x43, 0x97, 0x66, 0x16, 0x3E, 0xD9, 0xF9, 0x6B, 0x58, 0x98, 0xAE, 0xE0, 0x47, 0x2D, 0xA1, 0xC1, 0xBE, 0x7F, 0x1D},
   {0xC5, 0x77, 0xE1, 0x5A, 0xFF, 0x90, 0xAC, 0x3C, 0x17, 0xB4, 0x1F, 0x26, 0x4A, 0x94, 0x2C, 0xC9, 0x03, 0x5A, 0xF5, 0xC8, 0xE0, 0x28, 0x94, 0x32, 0xC0, 0x79, 0xA7, 0x54, 0x90, 0x21, 0x12, 0x66}},
  {{0x17, 0xD3, 0x48, 0x47, 0x3A, 0x5F, 0xE2, 0xA3, 0x57, 0x0D, 0x51, 0xD3, 0x22, 0x32, 0xFE, 0xEF, 0x2F, 0x56, 0xA2, 0xAB, 0x4F, 0xCD, 0xBC, 0x6C, 0x91, 0x47, 0xD6, 0x96, 0x51, 0xDD, 0xF4, 0x2C},
   {0x4D, 0xA5, 0xA0, 0x4F, 0x19, 0x4F, 0x79, 0x4D, 0x34, 0x43, 0xF0, 0xD5, 0xAE, 0x96, 0x83, 0x33, 0x9A, 0x00, 0x64, 0xE6, 0x61, 0xB2, 0x1B, 0xBD, 0xC4, 0x36, 0xFF, 0x1D, 0x4A, 0x57, 0xEF, 0x40},
   {0x58, 0x72, 0x44, 0xB2, 0x14, 0xD0, 0x0D, 0x76, 0x0B, 0x93, 0xEF, 0x0F, 0xFD, 0x43, 0x51, 0xAB, 0x8A, 0xCB, 0x53, 0x2A, 0x6B, 0x89, 0xD4, 0x9E, 0x9F, 0x53, 0x7C, 0x2B, 0x8B, 0x01, 0x0A, 0x3D}},
  {{0xE4, 0xBA, 0x12, 0x75, 0xDE, 0x57, 0x1F, 0x98, 0x82, 0x37, 0x07, 0x6C, 0x5D, 0x11, 0x43, 0x59, 0x89, 0xED, 0x27, 0x2D, 0xB1, 0x92, 0x5A, 0x65, 0x10, 0x19, 0xD9, 0xF0, 0x7E, 0x1E, 0x3D, 0x43},
   {0x28, 0x45, 0xB3, 0x4C, 0xD5, 0xE8, 0x9E, 0x88, 0x62, 0x93, 0x4B, 0x0D, 0x15, 0x06, 0x02, 0x1A, 0x9E, 0xE1, 0x41, 0x5D, 0x68, 0x5C, 0x06, 0x35, 0xC7, 0x4C, 0x98, 0xD0, 0x79, 0xF7, 0x45, 0x48},
   {0x1E, 0xDC, 0x3B, 0x80, 0x61, 0xDC, 0x08, 0x5D, 0x2E, 0x32, 0x48, 0x13, 0x47, 0x90, 0x8E, 0xF2, 0xA4, 0x03, 0xF5, 0xA5, 0x72, 0xFF, 0x61, 0x6B, 0xF5, 0x0C, 0xF7, 0x9B, 0x5A, 0x97, 0xD7, 0x4C}},
  {{0x03, 0x64, 0x7B, 0x7B, 0xBA, 0x22, 0x7C, 0xEE, 0x28, 0xF5, 0xF3, 0xA6, 0xFB, 0x9C, 0x5C, 0xA5, 0xAD, 0x38, 0x25, 0xBF, 0xDE, 0xF1, 0x96, 0x30, 0x51, 0xBE, 0x38, 0x4D, 0x71, 0x0C, 0x84, 0x53},
   {0xB6, 0xF0, 0x64, 0x5C, 0x45, 0x3A, 0x61, 0x2C, 0x2D, 0x49, 0xD1, 0x21, 0xDC, 0x36, 0x7B, 0x6D, 0xD9, 0x26, 0xC9, 0x97, 0x01, 0x04, 0x27, 0x5C, 0xC6, 0xCC, 0x2B, 0x4A, 0xA7, 0x6E, 0xD6, 0x71},
   {0x82, 0xAD, 0x58, 0x63, 0xE6, 0xED, 0xDE, 0x23, 0xD7, 0x1D, 0xB3, 0x01, 0x03, 0x3E, 0xC3, 0x8D, 0x13, 0xB0, 0xCE, 0xBC, 0x34, 0x34, 0xAD, 0xE4, 0xDD, 0xD6, 0x31, 0x83, 0x71, 0x3E, 0xDC, 0x7A}},
  {{0x35, 0x96, 0x30, 0x07, 0x05, 0xBB, 0x47, 0x96, 0x6C, 0xB4, 0x9A, 0xF2, 0x52, 0x46, 0x10, 0x1E, 0x6B, 0xD1, 0xB7, 0xA8, 0xCB, 0x4D, 0xA3, 0x78, 0x68, 0xAA, 0xF9, 0xEA, 0xFE, 0x9D, 0xA2, 0x1D},
   {0x76, 0x10, 0x9C, 0x4A, 0xB5, 0x98, 0x29, 0x81, 0xEA, 0xC0, 0x53, 0x93, 0x0D, 0x4E, 0xD3, 0xD7, 0xF6, 0xCD, 0x2F, 0x70, 0x81, 0xF4, 0xC6, 0xEF, 0x70, 0x51, 0x5D, 0xAA, 0xCA, 0x6C, 0x13, 0x4D},
   {0x2A, 0xDE, 0x43, 0xC0, 0x3E, 0xB7, 0x08, 0x18, 0x8B, 0x6A, 0xA2, 0xD3, 0xB1, 0xCA, 0x38, 0xE7, 0x2A, 0x34, 0x68, 0xCE, 0xEF, 0x18, 0xEE, 0xC2, 0x40, 0xC3, 0xC6, 0xDB, 0x20, 0xEB, 0x44, 0x15}},
  {{0x73, 0xCD, 0x42, 0x81, 0xB7, 0xAD, 0x9A, 0x04, 0x5D, 0xC4, 0x2E, 0x47, 0x15, 0x17, 0xB5, 0x30, 0x45, 0xD7, 0x04, 0x56, 0xD2, 0xC8, 0xDA, 0xF7, 0x1C, 0xE6, 0xB2, 0x2F, 0xD0, 0x64, 0x3D, 0x26},
   {0xD7, 0x14, 0x1C, 0x8F, 0x13, 0xDE, 0x11, 0xDD, 0xB5, 0xF3, 0x24, 0x11, 0x7D, 0x46, 0x42, 0xFD, 0xF1, 0x59, 0x09, 0x1B, 0x8C, 0x20, 0xCD, 0xC5, 0x29, 0x24, 0x3B, 0x3D, 0xD3, 0xAA, 0xDD, 0x14},
   {0x97, 0x46, 0x1E, 0x66, 0xE9, 0x61, 0xEA, 0x8C, 0x24, 0x72, 0x10, 0xD4, 0x66, 0x52, 0x48, 0x88, 0xE7, 0x66, 0x2D, 0x96, 0x36, 0x14, 0xAE, 0x56, 0x45, 0xFA, 0x20, 0x3A, 0x4A, 0xD1, 0x83, 0x3D}},
  {{0x1D, 0xB9, 0x2D, 0x81, 0xE2, 0xD8, 0xC3, 0x7D, 0xC1, 0x67, 0x94, 0xD8, 0xCE, 0xBE, 0x6D, 0xD7, 0x67, 0xB5, 0xC2, 0x41, 0x2B, 0xFD, 0xF7, 0x49, 0x92, 0x9F, 0xBB, 0x43, 0x27, 0x23, 0x59, 0x5E},
   {0x24, 0x4B, 0x08, 0xCA, 0xEC, 0x40, 0x8D, 0xC5, 0xE6, 0x47, 0xF0, 0x9F, 0x79, 0xC6, 0xBA, 0x1D, 0x0E, 0x71, 0x20, 0x33, 0xF9, 0x20, 0x50, 0x94, 0x8F, 0xE8, 0x69, 0x17, 0xE2, 0xE6, 0xA1, 0x15},
   {0x2A, 0xBA, 0xFD, 0x60, 0xDA, 0x8A, 0x55, 0x67, 0x61, 0xE1, 0x70, 0xE8, 0x91, 0x0E, 0x75, 0x8F, 0x8C, 0xF8, 0xC4, 0x7C, 0x23, 0x5E, 0x76, 0xF8, 0x56, 0x16, 0xC6, 0x87, 0x25, 0xC5, 0x2D, 0x71}},
  {{0x7E, 0xB4, 0xE3, 0xE7, 0x58, 0x20, 0x88, 0x52, 0x72, 0x55, 0x36, 0xDE, 0x4D, 0x7D, 0x02, 0x3F, 0x06, 0x35, 0x74, 0x0E, 0xCB, 0x37, 0x16, 0xC7, 0x2F, 0x78, 0x47, 0xC3, 0x2B, 0x90, 0xF1, 0x35},
   {0xB9, 0x2B, 0x85, 0x93, 0x4E, 0x23, 0x20, 0xCA, 0xE7, 0xC8, 0x68, 0x95, 0xB6, 0x2E, 0x02, 0x44, 0xA3, 0xA2, 0xD7, 0xDA, 0x39, 0x0C, 0x4E, 0x5C, 0x45, 0xF1, 0x8A, 0xA5, 0xF0, 0x2F, 0x44, 0x58},
   {0xD5, 0x7F, 0x52, 0xB3, 0xE2, 0xD4, 0xC8, 0x04, 0x17, 0x25, 0xCF, 0x0D, 0x3E, 0x93, 0x67, 0xB3, 0xD9, 0xAA, 0x11, 0x18, 0xCB, 0xC8, 0x44, 0x31, 0xFD, 0x5E, 0x10, 0x97, 0x54, 0x32, 0x1F, 0x2A}},
  {{0x12, 0x90, 0x76, 0x2B, 0x5D, 0x04, 0x28, 0x04, 0xAF, 0x0C, 0x91, 0x1E, 0x6C, 0x42, 0x1F, 0x96, 0xB3, 0xE1, 0x21, 0x7D, 0x45, 0x63, 0x67, 0xE8, 0x41, 0x33, 0x4B, 0xF5, 0x6A, 0x4A, 0x2F, 0x78},
   {0x64, 0x6E, 0x2F, 0xCA, 0xEA, 0x84, 0x48, 0x61, 0x2E, 0x82, 0xF2, 0xE5, 0xE1, 0xF7, 0x4B, 0x2B, 0x8D, 0x98, 0x07, 0x3A, 0xBE, 0x7D, 0x2D, 0x45, 0x5A, 0x55, 0x20, 0x7B, 0xC7, 0xD3, 0x7C, 0x67},
   {0x17, 0xDC, 0x56, 0xBF, 0x03, 0x2E, 0xBF, 0x21, 0x12, 0x89, 0x96, 0x8C, 0x09, 0xDA, 0x6C, 0xDF, 0xCB, 0x91, 0xE4, 0x91, 0x66, 0x7B, 0x22, 0x3E, 0x9B, 0x12, 0xC8, 0x0F, 0x66, 0x20, 0x80, 0x2D}},
  {{0xB3, 0xCF, 0x0D, 0xDF, 0x27, 0x41, 0x3E, 0x57, 0xE6, 0xE7, 0x63, 0x72, 0x10, 0x02, 0xA1, 0xC7, 0xFF, 0xF2, 0x6F, 0xD6, 0x68, 0x9D, 0x11, 0x31, 0x9C, 0x55, 0x3C, 0x86, 0xD8, 0x8B, 0x4D, 0x25},
   {0xFE, 0x3D, 0x6B, 0x1A, 0x7A, 0x8C, 0x19, 0xBD, 0x86, 0xA9, 0xC9, 0x07, 0xB5, 0x74, 0x3C, 0x2B, 0x8F, 0xEE, 0xED, 0xD6, 0xF3, 0x6F, 0xCE, 0x9D, 0x19, 0x67, 0x47, 0x2A, 0x06, 0xEB, 0x98, 0x42},
   {0x1A, 0x09, 0xFF, 0xE9, 0x47, 0xC3, 0x69, 0x71, 0xBF, 0x53, 0x1B, 0x8E, 0xA3, 0xF6, 0x00, 0x9D, 0x01, 0xFF, 0x2C, 0x13, 0xE0, 0x48, 0xB0, 0x86, 0xDD, 0xF6, 0xF5, 0x39, 0x88, 0x2F, 0x93, 0x33}},
  {{0x59, 0x2C, 0x1F, 0x2D, 0xED, 0xC7, 0x37, 0x78, 0x67, 0x0D, 0x26, 0x41, 0x0B, 0x15, 0x0D, 0x6B, 0x0B, 0xF5, 0x7D, 0x48, 0x2C, 0xA6, 0x19, 0x84, 0xEE, 0x40, 0xBE, 0x02, 0x1A, 0xAD, 0xDC, 0x21},
   {0x5C, 0xF9, 0xE8, 0xA2, 0x06, 0xAD, 0x44, 0x26, 0x0C, 0xE6, 0x6E, 0xB7, 0xF6, 0x17, 0x68, 0x23, 0x71, 0x2B, 0xF4, 0x3D, 0x35, 0x5B, 0xD9, 0x61, 0x46, 0x90, 0x1E, 0xA1, 0x6E, 0x1C, 0x47, 0x64},
   {0x63, 0xBA, 0x4E, 0x4D, 0x89, 0x2E, 0x4C, 0x95, 0xB5, 0x03, 0xDD, 0x9F, 0x2E, 0x74, 0x57, 0x22, 0x8E, 0x3A, 0x0F, 0x85, 0xE8, 0x9B, 0x36, 0xE9, 0xF7, 0x73, 0x27, 0x16, 0x4C, 0xE2, 0x35, 0x7E}},
  {{0xB5, 0x70, 0xA5, 0xA6, 0xB8, 0x54, 0x9B, 0x76, 0x73, 0x14, 0x9A, 0x5C, 0xAD, 0x90, 0x58, 0x43, 0x21, 0x30, 0xA6, 0xA3, 0xC0, 0x73, 0x42, 0x88, 0x5B, 0xE7, 0xB0, 0x49, 0xC6, 0x1A, 0xBA, 0x12},
   {0xDE, 0xE7, 0x3F, 0x80, 0xE4, 0x7D, 0x09, 0xC0, 0xE6, 0x41, 0x72, 0xE8, 0x44, 0x1C, 0xBE, 0x33, 0x53, 0xF1, 0x02, 0xCC, 0xCB, 0xD7, 0xF1, 0xCE, 0x2F, 0x38, 0xF7, 0xAF, 0x15, 0x0D, 0xAC, 0x3F},
   {0x53, 0x49, 0xC3, 0xA0, 0x23, 0x6D, 0x66, 0x82, 0x7A, 0x69, 0x1B, 0x3E, 0xA4, 0x75, 0xE6, 0x25, 0xF3, 0x84, 0x45, 0xD2, 0x6E, 0x41, 0x3D, 0x8E, 0x50, 0x6A, 0x5D, 0xC6, 0xBB, 0x1E, 0x15, 0x00}},
  {{0x3E, 0x15, 0x35, 0xD8, 0x6E, 0x56, 0x72, 0x6E, 0xDF, 0x61, 0xD8, 0xF6, 0x15, 0xA9, 0x59, 0x0B, 0xC1, 0x10, 0xA9, 0xD1, 0xD2, 0x60, 0x47, 0xB3, 0x50, 0x1B, 0xA7, 0x93, 0x26, 0x19, 0xB3, 0x5C},
   {0x9E, 0x82, 0xFB, 0x6A, 0x2A, 0x3F, 0xE4, 0xBE, 0x93, 0x58, 0xAD, 0xB2, 0xE3, 0xCD, 0x49, 0x16, 0x7D, 0xEF, 0x9A, 0x53, 0x7E, 0x29, 0x48, 0x61, 0x22, 0x84, 0x37, 0xBC, 0x2A, 0x8B, 0x6F, 0x56},
   {0xF3, 0xBC, 0xC1, 0xCE, 0xB6, 0x0D, 0x2B, 0xC8, 0xED, 0xFB, 0x77, 0xF1, 0x77, 0x91, 0x46, 0x94, 0xC5, 0x65, 0x57, 0x26, 0x2A, 0x03, 0xAC, 0x6C, 0x48, 0x04, 0x21, 0xDA, 0x1A, 0xD3, 0x0B, 0x5A}},
  {{0x76, 0x57, 0xFA, 0xEB, 0x75, 0x7D, 0xAA, 0x87, 0x86, 0x3B, 0x0E, 0xE3, 0x01, 0x73, 0x41, 0x87, 0x91, 0x2C, 0xC0, 0x02, 0x0E, 0x8A, 0x62, 0x5B, 0xBB, 0x28, 0x52, 0x27, 0x1D, 0x99, 0x7D, 0x20},
   {0xC5, 0xE2, 0x1E, 0xFE, 0x02, 0x8A, 0x14, 0xE7, 0x00, 0xF0, 0x6E, 0x46, 0x41, 0xFF, 0x17, 0xCC, 0x38, 0x3C, 0x52, 0xD6, 0x5D, 0xB9, 0x6F, 0x0E, 0xE8, 0xEE, 0xBD, 0x24, 0x87, 0x2B, 0xB9, 0x53},
   {0x96, 0xFF, 0x53, 0x72, 0xE9, 0x85, 0xF8, 0x13, 0xD5, 0x5F, 0xD5, 0x15, 0xD1, 0x22, 0x89, 0x84, 0x28, 0xBD, 0x5C, 0x68, 0x41, 0xC2, 0x07, 0xE9, 0xD4, 0x51, 0x72, 0x31, 0x0A, 0x7E, 0xA0, 0x6B}},
  {{0x89, 0x4B, 0x38, 0xA6, 0x35, 0x36, 0x10, 0x28, 0x6F, 0x57, 0x7A, 0xFD, 0x0D, 0x9C, 0xA8, 0x28, 0x79, 0x73, 0x77, 0xC6, 0x52, 0xA4, 0x1C, 0x59, 0x96, 0xD9, 0xED, 0xA3, 0xF7, 0x0D, 0x8F, 0x41},
   {0xA3, 0x81, 0x24, 0xCC, 0x15, 0xE8, 0x4D, 0xFF, 0x3E, 0xF6, 0x4A, 0x76, 0x46, 0xF3, 0xF1, 0x53, 0x7C, 0xB9, 0x98, 0xA6, 0xFE, 0xFA, 0x3F, 0xC5, 0x24, 0x53, 0xA1, 0x79, 0x63, 0x68, 0x8B, 0x35},
   {0x92, 0x4F, 0x95, 0xCD, 0x29, 0x29, 0x06, 0x9D, 0x55, 0x76, 0x1E, 0x9A, 0xFD, 0xAD, 0xCA, 0x4E, 0xB3, 0x83, 0x14, 0x82, 0xC5, 0x32, 0xB0, 0xDA, 0x9C, 0xAC, 0x20, 0x29, 0x61, 0x41, 0x27, 0x27}},
  {{0x76, 0xE7, 0x59, 0xC8, 0xB0, 0xC0, 0x53, 0x95, 0xCE, 0x89, 0x95, 0x52, 0x90, 0x20, 0x8F, 0xCD, 0xB8, 0x52, 0xBC, 0x21, 0xCB, 0xF3, 0x5C, 0x76, 0x11, 0x85, 0x84, 0x34, 0x09, 0x76, 0x6B, 0x27},
   {0x1E, 0xFF, 0x56, 0xF3, 0xC5, 0x2E, 0x41, 0xAB, 0x51, 0x3D, 0x41, 0x5A, 0x49, 0x2E, 0xE6, 0x83, 0xFB, 0xE8, 0x42, 0x4E, 0xE0, 0x28, 0x58, 0x6A, 0x01, 0x84, 0xE4, 0x00, 0x62, 0x4D, 0x53, 0x3F},
   {0x2E, 0x1D, 0x07, 0x46, 0x18, 0x9F, 0x78, 0x2B, 0x31, 0x38, 0x24, 0x9A, 0x36, 0xCE, 0xE6, 0xB1, 0x7D, 0x92, 0xE3, 0x50, 0x2A, 0x46, 0x38, 0x03, 0x10, 0xE3, 0xB7, 0x5B, 0x2B, 0x09, 0xB0, 0x7C}},
  {{0xD5, 0x63, 0x99, 0xB8, 0x85, 0x47, 0x81, 0xC5, 0x08, 0x48, 0x52, 0xD2, 0x28, 0xDE, 0x63, 0x36, 0xAD, 0x65, 0x08, 0xEB, 0x80, 0xDE, 0xDC, 0xB6, 0x10, 0x97, 0x3D, 0x5C, 0x39, 0x23, 0xAE, 0x48},
   {0x11, 0xA0, 0xED, 0x5E, 0x58, 0x48, 0x25, 0xF5, 0x98, 0x68, 0xF2, 0x8E, 0xCC, 0x7D, 0xE8, 0xE9, 0x17, 0x7E, 0xFE, 0x27, 0xF8, 0x1B, 0x89, 0x04, 0xDD, 0xA4, 0xB8, 0x57, 0xCD, 0x64, 0x00, 0x77},
   {0x4E, 0x02, 0x74, 0x21, 0xA0, 0xF0, 0x38, 0xD6, 0xA9, 0x66, 0x3B, 0x8F, 0x91, 0x85, 0x88, 0xEA, 0xE1, 0xA9, 0x9A, 0xC5, 0x44, 0x4F, 0xB7, 0x9F, 0x89, 0xB7, 0x20, 0x66, 0x0B, 0x70, 0x25, 0x6F}},
  {{0xE4, 0xFD, 0xE2, 0xF9, 0x44, 0x21, 0x70, 0xCB, 0xB4, 0x8F, 0x2E, 0x53, 0xB3, 0x48, 0xB0, 0x59, 0x2F, 0xE6, 0x17, 0x57, 0xD3, 0x54, 0x12, 0x10, 0x5F, 0x82, 0x27, 0x7D, 0x15, 0xE9, 0x76, 0x1C},
   {0x17, 0x63, 0x54, 0x23, 0x6F, 0x59, 0x6D, 0x63, 0xE2, 0xAD, 0xBB, 0x30, 0x2B, 0x85, 0x69, 0xF5, 0x31, 0x38, 0xAF, 0x2A, 0xA2, 0x6F, 0x3D, 0xDF, 0xBE, 0xEC, 0xD2, 0x62, 0xF8, 0x81, 0x20, 0x51},
   {0x6E, 0x8A, 0x12, 0x67, 0x31, 0x09, 0x62, 0xBC, 0x19, 0x79, 0x64, 0x44, 0x94, 0x58, 0xB4, 0x6F, 0x73, 0x54, 0x20, 0x7B, 0xA1, 0xCA, 0xD8, 0xFF, 0x4A, 0x4E, 0xFA, 0x00, 0xBD, 0x76, 0x69, 0x7B}},
  {{0x65, 0x2E, 0xB0, 0xD9, 0x2E, 0x15, 0xA1, 0xAD, 0x02, 0x25, 0xFC, 0x8E, 0x33, 0xD8, 0xDB, 0xB9, 0x68, 0xEA, 0x1F, 0xDB, 0xF0, 0x08, 0x19, 0xFB, 0x88, 0xB1, 0xDD, 0x5C, 0x2D, 0x87, 0x0F, 0x1C},
   {0xEE, 0xBA, 0x05, 0x99, 0xB5, 0x89, 0xC7, 0xDE, 0xC1, 0x1B, 0xB1, 0xB9, 0x30, 0x59, 0xEB, 0x1D, 0x36, 0xBF, 0x0E, 0xAC, 0xDE, 0x1A, 0xC2, 0x01, 0x64, 0x2C, 0xC5, 0xD4, 0x6F, 0x25, 0x1F, 0x3B},
   {0x30, 0xD8, 0x58, 0xBA, 0x43, 0xF2, 0x90, 0xA5, 0x68, 0xBE, 0x37, 0x1C, 0x3B, 0x63, 0x38, 0x41, 0x71, 0x03, 0x43, 0x9B, 0x8F, 0xEE, 0xFB, 0x39, 0xF9, 0xE8, 0x03, 0x8B, 0xEE, 0x80, 0xCF, 0x35}},
  {{0xCB, 0x8F, 0x9B, 0x32, 0xD7, 0x91, 0x1F, 0x67, 0x62, 0x15, 0xEE, 0xE5, 0x2D, 0x77, 0xB7, 0x4F, 0x59, 0xA6, 0x6A, 0xD6, 0x0D, 0xAC, 0x2C, 0x80, 0xD5, 0x13, 0x79, 0x87, 0x16, 0xA3, 0x0D, 0x19},
   {0xF1, 0xEC, 0x13, 0x42, 0xE0, 0x6B, 0x46, 0x90, 0xEF, 0xDF, 0xA9, 0xB7, 0x8A, 0x9C, 0xBE, 0x61, 0xBE, 0x00, 0xA2, 0xBB, 0x51, 0xF0, 0x69, 0xAF, 0x01, 0x12, 0x74, 0xB3, 0x11, 0x70, 0xA8, 0x34},
   {0x88, 0x1F, 0x60, 0x43, 0x16, 0x08, 0x63, 0xB0, 0xC5, 0xEB, 0x8E, 0x6A, 0x2C, 0x98, 0xC8, 0x19, 0xB5, 0xAA, 0x7C, 0xCA, 0x37, 0x7B, 0xFB, 0x41, 0xE2, 0x56, 0x0C, 0x4D, 0xC5, 0xDF, 0xF1, 0x78}},
  {{0xA1, 0x43, 0x17, 0xBD, 0x8B, 0xAD, 0x7D, 0x46, 0x76, 0x49, 0x35, 0x3F, 0x7B, 0xEF, 0x16, 0xF1, 0xDE, 0x81, 0xBE, 0xFE, 0xCC, 0x1B, 0xDC, 0x77, 0xC5, 0x3E, 0x71, 0x34, 0x42, 0xC2, 0x8F, 0x0B},
   {0x61, 0x06, 0xF3, 0x2E, 0xF4, 0x4F, 0xCF, 0x52, 0x17, 0x34, 0xB4, 0xEA, 0x84, 0xC3, 0x77, 0x13, 0xEB, 0x09, 0x40, 0x87, 0x35, 0x55, 0x9E, 0x04, 0x83, 0xBB, 0x4B, 0xC9, 0x24, 0x34, 0xE9, 0x61},
   {0x31, 0xB0, 0x35, 0x9A, 0x4F, 0x5E, 0x15, 0x05, 0x37, 0x74, 0xB6, 0xFB, 0xF1, 0x0F, 0x4E, 0x03, 0x15, 0x50, 0x41, 0x6B, 0xD6, 0x51, 0x32, 0xEC, 0xA1, 0x82, 0x6A, 0xC7, 0x82, 0x82, 0xF4, 0x4E}},
  {{0x82, 0x3C, 0xA8, 0x5F, 0x81, 0xD4, 0x38, 0x90, 0xB2, 0xCF, 0xFA, 0xF2, 0x64, 0x01, 0x49, 0x7B, 0x8F, 0xB1, 0x44, 0x8E, 0x92, 0xD9, 0xB4, 0xE0, 0x6A, 0xB3, 0xE5, 0xED, 0x7B, 0x30, 0x79, 0x7F},
   {0x00, 0x0D, 0x6C, 0xB5, 0x3A, 0xCB, 0x2C, 0x00, 0x02, 0xC7, 0x4C, 0x83, 0x21, 0x03, 0x82, 0x94, 0x00, 0xAE, 0x43, 0x48, 0x28, 0x3C, 0xA8, 0x92, 0xE8, 0xEB, 0xAB, 0x40, 0x98, 0x5D, 0xFC, 0x30},
   {0x44, 0xDD, 0x1D, 0xB2, 0x8D, 0x2E, 0xEC, 0xEC, 0x6A, 0xBD, 0x09, 0x0C, 0x11, 0xBF, 0xB4, 0x5E, 0xDA, 0xDC, 0x10, 0xAA, 0xE0, 0x78, 0x40, 0xA3, 0x78, 0x7C, 0xB5, 0x50, 0xB3, 0x14, 0xD8, 0x6E}},
  {{0x92, 0x0D, 0x6A, 0x0B, 0x72, 0x9B, 0x55, 0xCB, 0x68, 0x66, 0x88, 0xFA, 0x01, 0xA7, 0x68, 0x16, 0xB3, 0x5C, 0x8C, 0xD7, 0x62, 0x5B, 0x9D, 0x0F, 0xDE, 0x0C, 0x72, 0xDA, 0x69, 0x09, 0x04, 0x52},
   {0x1D, 0x91, 0x32, 0x03, 0x02, 0x0C, 0x05, 0x61, 0xDD, 0x27, 0x8C, 0xC8, 0x20, 0x23, 0x32, 0xA2, 0xDF, 0x5D, 0x2F, 0x56, 0xB6, 0xE8, 0x23, 0xD4, 0x32, 0x59, 0x9F, 0x04, 0x7A, 0x44, 0xE4, 0x71},
   {0x66, 0x5E, 0xFB, 0x3F, 0x7A, 0xC6, 0x1B, 0xF2, 0x04, 0x31, 0xD2, 0xDE, 0xB2, 0x5B, 0x70, 0x91, 0x9B, 0x5E, 0x40, 0x15, 0xD4, 0xAB, 0x5C, 0xB5, 0xA6, 0xD0, 0x3B, 0xCD, 0x98, 0x46, 0x33, 0x47}},
  {{0xD6, 0x5A, 0x3D, 0x0C, 0x3F, 0x57, 0x5F, 0x71, 0x2D, 0x35, 0x73, 0xAE, 0x45, 0x47, 0xAA, 0x7E, 0x31, 0x72, 0xFD, 0xC1, 0x7D, 0xED, 0xD6, 0xBA, 0x1B, 0xD1, 0x9A, 0xCA, 0x8C, 0x03, 0xCD, 0x6F},
   {0xED, 0x83, 0x84, 0x28, 0xE0, 0xC8, 0x6B, 0x40, 0xC2, 0x0C, 0x24, 0x20, 0xA4, 0xF4, 0xCD, 0x64, 0x3F, 0xFA, 0x89, 0x2C, 0x4A, 0x89, 0xED, 0xFD, 0x85, 0x39, 0xB3, 0x16, 0x4D, 0xF7, 0x10, 0x2F},
   {0xCB, 0x1D, 0xB9, 0xF2, 0x03, 0xD9, 0x2E, 0xB2, 0x39, 0x53, 0xE6, 0x82, 0x38, 0x92, 0xA3, 0xDD, 0x19, 0x45, 0xA5, 0x46, 0x89, 0x4C, 0x37, 0x73, 0x77, 0xA5, 0x7B, 0xFE, 0x55, 0xE3, 0x2E, 0x4A}},
  {{0x0E, 0x9A, 0x38, 0x74, 0x27, 0x04, 0x7A, 0xC3, 0xC8, 0x9A, 0xDF, 0xAE, 0xCC, 0x18, 0x79, 0x81, 0x3C, 0xF2, 0x7D, 0x17, 0xA9, 0x29, 0x04, 0x88, 0x95, 0x91, 0x35, 0xC2, 0x0B, 0xB6, 0x45, 0x64},
   {0x57, 0xAE, 0xDA, 0xDF, 0x90, 0xCD, 0x04, 0x1E, 0x54, 0xFE, 0x00, 0x5A, 0x60, 0x38, 0x8F, 0x53, 0x9F, 0x98, 0xC6, 0x7A, 0xD6, 0xAE, 0xC1, 0x0C, 0xD8, 0xF6, 0x76, 0x61, 0x46, 0x22, 0xF7, 0x62},
   {0xE5, 0x86, 0xEB, 0xAC, 0xB7, 0xB3, 0xFD, 0x1D, 0xF6, 0xD6, 0x2A, 0x8C, 0x37, 0xE1, 0xC9, 0xB5, 0xCF, 0xD6, 0xD0, 0x76, 0x6E, 0xD8, 0x51, 0x3B, 0x48, 0x5E, 0x1C, 0xBD, 0xE4, 0x26, 0x9E, 0x76}},
  {{0xF7, 0xFA, 0xB7, 0xEA, 0xF0, 0xA4, 0x9B, 0xB6, 0x94, 0x32, 0x9B, 0xA8, 0xFD, 0x4B, 0x6C, 0x12, 0xA0, 0x33, 0xA2, 0x15, 0xE9, 0xF1, 0xA2, 0xC1, 0x1F, 0x74, 0x9E, 0xAE, 0xE1, 0x92, 0xDF, 0x02},
   {0x39, 0x8D, 0xBD, 0x34, 0x56, 0xAB, 0x1E, 0x59, 0x32, 0x9D, 0x69, 0xAA, 0x46, 0x16, 0xF6, 0x57, 0xFA, 0x60, 0x7D, 0x1E, 0xAE, 0x42, 0xFB, 0x60, 0x3E, 0x3C, 0x68, 0xBA, 0xB4, 0x4D, 0x67, 0x02},
   {0x52, 0x24, 0xD3, 0xD1, 0xEF, 0x6C, 0xD4, 0x94, 0x88, 0xC6, 0xC9, 0xB1, 0x8F, 0x39, 0xEA, 0x38, 0xFF, 0xA8, 0x86, 0x63, 0xBB, 0x1F, 0x63, 0xC1, 0x9F, 0xAE, 0x95, 0x1A, 0x1F, 0x3C, 0x24, 0x4D}},
  {{0x81, 0x5B, 0xB5, 0xDF, 0x5F, 0x95, 0xE1, 0x53, 0xFF, 0xB0, 0xE6, 0x70, 0xD3, 0x1F, 0x7F, 0x1B, 0xD3, 0xFD, 0x46, 0x26, 0x22, 0x0A, 0xF4, 0xAA, 0x89, 0xC4, 0x18, 0x4C, 0xDC, 0x5C, 0xC2, 0x17},
   {0xB2, 0xDA, 0xD8, 0xD2, 0x8F, 0x8A, 0xE0, 0x1B, 0x05, 0xA2, 0x25, 0xF8, 0x86, 0x20, 0x1B, 0x1B, 0xC6, 0x48, 0x7E, 0xB9, 0x96, 0xE5, 0xB3, 0x8D, 0x27, 0x10, 0xBF, 0x26, 0xEA, 0xBA, 0x33, 0x6E},
   {0xF3, 0x94, 0xE2, 0x54, 0xD9, 0x88, 0x3A, 0x57, 0x11, 0xAD, 0x20, 0x69, 0x2B, 0x83, 0xE0, 0x59, 0xF2, 0xCE, 0x06, 0x28, 0x4F, 0xF1, 0xC4, 0xC5, 0x44, 0xFB, 0xA0, 0xEB, 0x57, 0xA4, 0x5F, 0x23}},
  {{0xF4, 0x9E, 0x53, 0xC4, 0xF1, 0x05, 0xCA, 0x21, 0x7B, 0x30, 0x3A, 0xCC, 0x18, 0x5C, 0xFB, 0x6B, 0xBF, 0x89, 0x55, 0x39, 0x66, 0x7B, 0x3B, 0xAE, 0xC5, 0x58, 0xAA, 0x0D, 0x76, 0x17, 0x88, 0x1F},
   {0x92, 0x09, 0xFD, 0xA8, 0xA6, 0xEF, 0xC0, 0x34, 0xAA, 0x9B, 0x3F, 0x9D, 0x57, 0xCE, 0xA0, 0xF6, 0x78, 0xB4, 0xF2, 0x86, 0x4F, 0x90, 0x98, 0xE2, 0x25, 0xDB, 0x8A, 0x81, 0xC3, 0x7D, 0x23, 0x0C},
   {0x86, 0x06, 0xE3, 0xD3, 0x4A, 0x2A, 0x0B, 0x43, 0xC3, 0x48, 0xCD, 0xA5, 0x12, 0x50, 0xBB, 0x1F, 0xC2, 0x64, 0x4A, 0x50, 0xD1, 0x04, 0x8E, 0x12, 0xD8, 0x3D, 0x3B, 0xEC, 0x3F, 0x99, 0x38, 0x38}},
  {{0x35, 0x60, 0xF3, 0x97, 0x45, 0xF5, 0xE0, 0x74, 0x1D, 0xFB, 0x99, 0xB1, 0x90, 0xC6, 0xF6, 0x7C, 0x41, 0x1C, 0xCC, 0x77, 0x40, 0x74, 0x59, 0xF2, 0x99, 0xF3, 0x13, 0x9A, 0xBE, 0xD8, 0x3C, 0x1C},
   {0xE4, 0xA5, 0x24, 0x6C, 0x92, 0x2F, 0xB5, 0x64, 0x4C, 0x6A, 0x16, 0xA0, 0x9E, 0x37, 0x69, 0xE4, 0x44, 0x97, 0xDB, 0xE2, 0xD7, 0xBA, 0x9C, 0x74, 0x2A, 0xC1, 0xFB, 0x10, 0x87, 0xA1, 0x0B, 0x51},
   {0xB4, 0x0E, 0x44, 0xF2, 0xE1, 0x62, 0x40, 0xED, 0x31, 0x9C, 0xA9, 0xFF, 0x49, 0xE6, 0x2E, 0xEE, 0x3D, 0x4B, 0xD4, 0x58, 0x6C, 0x20, 0x21, 0xDA, 0x32, 0x5A, 0x89, 0xC1, 0xC8, 0xFD, 0xC2, 0x5F}},
  {{0x9B, 0xB7, 0xAB, 0x01, 0xCA, 0xB8, 0x5D, 0x62, 0x6C, 0x25, 0x25, 0x12, 0xB4, 0xEA, 0x7A, 0x87, 0x36, 0xE1, 0x61, 0x1A, 0xB0, 0xFD, 0x91, 0x7D, 0xBC, 0xEC, 0xE8, 0xD6, 0xF6, 0x99, 0x01, 0x25},
   {0xF7, 0x94, 0xEC, 0x2A, 0x64, 0x3F, 0xB0, 0x6D, 0xEA, 0x03, 0x3D, 0x66, 0xB6, 0x2A, 0x29, 0x18, 0x94, 0x19, 0xFB, 0x94, 0x38, 0xD5, 0x3A, 0x1B, 0x2D, 0xDD, 0x75, 0x34, 0x36, 0xA0, 0x1B, 0x77},
   {0x4C, 0x7A, 0xA3, 0xBE, 0xDA, 0x69, 0xF2, 0xBE, 0x92, 0xBD, 0xE9, 0xB7, 0x2B, 0x5E, 0x39, 0xF7, 0xA6, 0xB9, 0x64, 0x2F, 0xCB, 0x88, 0x84, 0x92, 0x51, 0xEE, 0x2E, 0x8F, 0x3D, 0x76, 0x4D, 0x17}},
  {{0x21, 0x27, 0x11, 0x84, 0xB0, 0x0A, 0x3D, 0xA8, 0x7E, 0xDA, 0x34, 0x79, 0x70, 0x84, 0xA5, 0x5A, 0xC1, 0x93, 0x67, 0x39, 0x59, 0x2A, 0xE9, 0xE6, 0x60, 0xE6, 0xC2, 0x1F, 0xE4, 0x11, 0x11, 0x21},
   {0xC2, 0xFA, 0xCF, 0xE5, 0x0F, 0x2F, 0x6D, 0x28, 0xA9, 0xF9, 0x1A, 0xF5, 0x18, 0xBF, 0xA4, 0x24, 0xEE, 0x08, 0xE7, 0x72, 0x42, 0x54, 0x72, 0x52, 0x07, 0x81, 0x29, 0xE7, 0x39, 0x89, 0x90, 0x5F},
   {0x4B, 0xFE, 0x31, 0xC3, 0x10, 0x5C, 0x21, 0x71, 0xCB, 0x35, 0x6D, 0x66, 0xBA, 0x64, 0x95, 0x73, 0xDB, 0x1D, 0x54, 0x5C, 0x02, 0x54, 0x6F, 0xE3, 0xF0, 0xE6, 0x8F, 0xD4, 0x18, 0x38, 0x18, 0x3A}},
  {{0x5D, 0x6E, 0xCA, 0xF3, 0xD4, 0xDB, 0xF4, 0x0E, 0x4F, 0x83, 0x4C, 0x45, 0xA9, 0x1C, 0x46, 0x24, 0x27, 0x6B, 0x20, 0x90, 0x2E, 0x98, 0xE3, 0xB0, 0xB0, 0x92, 0x61, 0x75, 0xFC, 0x24, 0x21, 0x09},
   {0xE9, 0x1F, 0xD5, 0xA5, 0x99, 0xC4, 0x2F, 0x05, 0xE2, 0x63, 0xAE, 0x8F, 0xC0, 0x6B, 0x42, 0xCD, 0xE1, 0x86, 0x18, 0x91, 0x5F, 0x63, 0xB7, 0x75, 0xDF, 0xF9, 0xC2, 0x0C, 0x18, 0x43, 0x22, 0x0F},
   {0x47, 0x25, 0x0E, 0x22, 0x29, 0xD3, 0xA5, 0x5C, 0x9E, 0xC2, 0x53, 0xB1, 0xD8, 0xD5, 0x63, 0x34, 0x3A, 0xBA, 0xA0, 0xE2, 0xBF, 0x6A, 0x77, 0x38, 0x3C, 0x15, 0x8E, 0xA0, 0x47, 0xB9, 0xB5, 0x23}},
  {{0xC4, 0x1C, 0xC8, 0x96, 0x24, 0x9F, 0x2B, 0x00, 0xBF, 0x31, 0x46, 0x19, 0xBB, 0xCF, 0x8D, 0x22, 0xA9, 0xBF, 0xC9, 0x2C, 0x51, 0xF2, 0xA6, 0xFB, 0x90, 0xA8, 0xE6, 0x7E, 0xF4, 0x8B, 0xC2, 0x2C},
   {0x3F, 0x9E, 0x82, 0xA8, 0x27, 0x76, 0x66, 0x6B, 0xA4, 0x0E, 0x7E, 0x55, 0x67, 0x57, 0x58, 0x4A, 0x81, 0x9D, 0x5F, 0xB4, 0x07, 0xD2, 0x1A, 0xC1, 0x70, 0x61, 0xA5, 0x66, 0xAE, 0x14, 0xC1, 0x19},
   {0x21, 0xFA, 0x7A, 0xA0, 0x83, 0x3B, 0xE7, 0xCA, 0x72, 0x8C, 0xB8, 0x36, 0xB0, 0xF8, 0xCC, 0xD5, 0x4F, 0x5C, 0x03, 0x8D, 0xC2, 0x41, 0x9B, 0xD3, 0x53, 0x37, 0xFE, 0x7F, 0xC7, 0xAD, 0x9A, 0x02}},
  {{0xC6, 0xFC, 0xE1, 0xEF, 0x15, 0x48, 0x78, 0x80, 0x93, 0x0D, 0xE3, 0x21, 0x2E, 0x3E, 0x49, 0x6D, 0x8B, 0x9F, 0x80, 0x13, 0x46, 0x06, 0xDD, 0xB1, 0x9C, 0x41, 0x3B, 0x53, 0x5E, 0x92, 0x92, 0x46},
   {0xFE, 0x78, 0xFE, 0x4D, 0x52, 0xD8, 0x59, 0x5B, 0xD3, 0xD0, 0x17, 0x10, 0xED, 0x72, 0x8F, 0x2E, 0xE8, 0x11, 0xA5, 0x1E, 0xD2, 0xB9, 0x93, 0x35, 0x7F, 0x04, 0x33, 0x8F, 0xE1, 0xC9, 0xA2, 0x49},
   {0xDC, 0xDB, 0x66, 0x00, 0x6E, 0x1E, 0x1C, 0xD5, 0xD6, 0x99, 0xF7, 0xEF, 0x71, 0x8F, 0xF7, 0xC7, 0x49, 0x16, 0x83, 0xCD, 0xF8, 0xB3, 0x17, 0xF1, 0xD1, 0xBE, 0x18, 0x31, 0x08, 0x96, 0x6F, 0x18}},
  {{0x4A, 0xA9, 0xBE, 0x97, 0x90, 0xCE, 0xFB, 0xA6, 0x14, 0x97, 0xF8, 0x75, 0x0E, 0x20, 0x41, 0x29, 0x36, 0x90, 0xAF, 0x32, 0xC7, 0x9F, 0xA8, 0xA9, 0x0A, 0x82, 0x1D, 0x64, 0xFA, 0x8B, 0x73, 0x21},
   {0xEE, 0x33, 0x23, 0x1A, 0x01, 0x7B, 0x26, 0xEF, 0x1C, 0x13, 0x8A, 0x61, 0xA7, 0xFC, 0x18, 0xA3, 0xEE, 0x52, 0xE9, 0xD4, 0x45, 0xAD, 0x70, 0x6A, 0xFA, 0x0A, 0x26, 0x3E, 0x9A, 0x7C, 0xE6, 0x0D},
   {0x3B, 0x19, 0xD5, 0x7F, 0xBC, 0x33, 0x78, 0xA0, 0x49, 0x81, 0xFC, 0xFC, 0xB1, 0x37, 0x9C, 0x05, 0xFE, 0xA5, 0x6B, 0xD4, 0x35, 0xE8, 0xA9, 0x32, 0xA0, 0x06, 0x83, 0x42, 0x55, 0xC7, 0x94, 0x43}},
  {{0x54, 0x26, 0xB0, 0x95, 0x26, 0x44, 0x0F, 0xF5, 0x10, 0x77, 0x98, 0x31, 0xBB, 0x24, 0x35, 0xEC, 0x9B, 0x21, 0xB4, 0xF8, 0x3D, 0xAB, 0x3E, 0x60, 0x42, 0x74, 0xC9, 0xD2, 0xA0, 0xB0, 0xFF, 0x1C},
   {0xAA, 0x46, 0x57, 0x3E, 0xCA, 0x57, 0xA2, 0x88, 0x9B, 0x7A, 0x74, 0x3F, 0x4F, 0x05, 0xAA, 0x2F, 0x5F, 0xC6, 0xC0, 0xE0, 0x50, 0x2F, 0x45, 0x9E, 0x6D, 0xA9, 0xCC, 0xEA, 0xFD, 0xF9, 0xBA, 0x07},
   {0x5F, 0x24, 0x12, 0x4F, 0x7A, 0xBF, 0xDD, 0x9F, 0xA8, 0xEB, 0xDC, 0x67, 0x98, 0x23, 0x72, 0x22, 0x8F, 0xBC, 0xCE, 0xE9, 0xE7, 0x45, 0xB4, 0x9B, 0x44, 0x77, 0xF2, 0xA8, 0x4D, 0x68, 0xD1, 0x7B}},
  {{0x38, 0xFF, 0x02, 0x6F, 0x3D, 0x93, 0xC7, 0x68, 0x73, 0x14, 0x9C, 0x28, 0xAF, 0x93, 0x05, 0x67, 0xBF, 0xD7, 0xB3, 0x35, 0x0C, 0xEB, 0x49, 0xBA, 0x21, 0x59, 0xA7, 0x57, 0xB4, 0x7F, 0xC0, 0x3D},
   {0x89, 0x0C, 0xA6, 0x99, 0x11, 0x20, 0x5F, 0x8C, 0x9F, 0x8F, 0x19, 0x47, 0xCF, 0x54, 0x85, 0xC5, 0x62, 0xE1, 0xCF, 0x00, 0x74, 0x12, 0x26, 0x29, 0x89, 0x80, 0x8B, 0xFD, 0xD4, 0x74, 0x7F, 0x7E},
   {0xA4, 0x3C, 0x40, 0x40, 0x53, 0x5D, 0x98, 0xFE, 0xC8, 0xA8, 0x44, 0x6E, 0x64, 0xC4, 0xCF, 0x98, 0x04, 0x14, 0x30, 0xA5, 0x67, 0x41, 0x24, 0xD5, 0xC1, 0xA5, 0xD8, 0x04, 0xE9, 0xD3, 0xE4, 0x53}},
  {{0xCE, 0x02, 0x3F, 0x28, 0x14, 0xC7, 0xD0, 0x90, 0x2D, 0x3B, 0x9D, 0xBF, 0x17, 0x05, 0xE4, 0x07, 0x19, 0x44, 0x28, 0x28, 0x15, 0x38, 0xFD, 0x54, 0x84, 0x83, 0x53, 0xB4, 0x53, 0x1C, 0x49, 0x50},
   {0x3E, 0x2E, 0x1D, 0xD5, 0xB7, 0x16, 0x75, 0x56, 0x57, 0xAA, 0x49, 0x71, 0xEB, 0x08, 0x30, 0xD8, 0x30, 0x1B, 0xC6, 0xD8, 0x70, 0x45, 0x94, 0x21, 0x3A, 0xFE, 0x63, 0x52, 0xB8, 0x95, 0xF3, 0x7E},
   {0xCD, 0xA3, 0xC7, 0x6B, 0xDB, 0x14, 0xBD, 0xB7, 0x3D, 0x47, 0xA1, 0x53, 0x22, 0x89, 0x1D, 0x05, 0x38, 0x12, 0xF4, 0x00, 0xA9, 0x01, 0xDB, 0xE5, 0x0E, 0x44, 0x06, 0x29, 0x96, 0x1B, 0xB3, 0x23}},
  {{0xCC, 0x51, 0x41, 0x62, 0x68, 0x4F, 0x9A, 0x41, 0x6E, 0xA1, 0x2A, 0x5B, 0xCF, 0xC2, 0x61, 0x98, 0x77, 0x24, 0x45, 0x83, 0x9E, 0x34, 0x7D, 0xF1, 0x4F, 0xA3, 0xCE, 0xFC, 0x72, 0xB2, 0xA6, 0x1F},
   {0x46, 0x8F, 0xED, 0xC7, 0x40, 0x70, 0x98, 0xB4, 0x93, 0x76, 0xF8, 0x8E, 0x5D, 0xB6, 0xD7, 0xB9, 0x94, 0x58, 0x23, 0x96, 0xA4, 0x62, 0xFC, 0x73, 0x59, 0x63, 0xD8, 0x61, 0xA3, 0x49, 0x09, 0x43},
   {0xE3, 0xFA, 0x1A, 0x47, 0xBF, 0x33, 0x8A, 0x88, 0x54, 0x5F, 0xD9, 0x8D, 0x6F, 0x53, 0xB4, 0xE2, 0xFC, 0xA8, 0xCD, 0xBE, 0xBA, 0x65, 0x31, 0xD4, 0x34, 0x42, 0xB3, 0xEB, 0x39, 0x73, 0x66, 0x26}},
  {{0x56, 0x58, 0xFB, 0x2D, 0x8A, 0x19, 0x31, 0xC0, 0x30, 0x21, 0xF4, 0x3E, 0x16, 0xD7, 0x1F, 0x59, 0x27, 0xAE, 0x4F, 0x1C, 0x52, 0x19, 0x55, 0xEA, 0xF9, 0xAC, 0x29, 0xED, 0xCE, 0x59, 0x8F, 0x20},
   {0x33, 0x44, 0xDB, 0x43, 0x5D, 0xA5, 0x6C, 0xEC, 0x63, 0x27, 0x13, 0x81, 0x21, 0x53, 0x45, 0x43, 0x3E, 0xA4, 0xE1, 0xE8, 0x53, 0x0E, 0x37, 0x0C, 0x99, 0x4B, 0x5F, 0x10, 0x6F, 0x48, 0x8F, 0x30},
   {0xBF, 0x76, 0xF1, 0xDB, 0x30, 0x7B, 0x43, 0xA7, 0x56, 0x72, 0x9C, 0xBA, 0x90, 0xA1, 0x10, 0x92, 0x7B, 0xEA, 0x19, 0xC3, 0xE5, 0xCB, 0xC4, 0xA6, 0x67, 0x9A, 0x48, 0x79, 0xEC, 0x97, 0x89, 0x00}},
  {{0x5B, 0x22, 0x65, 0x4E, 0x53, 0xF4, 0x73, 0x42, 0x70, 0x76, 0x6C, 0xBB, 0x9F, 0xB7, 0x6E, 0xC3, 0xEF, 0xCE, 0xFB, 0x09, 0x8E, 0x90, 0x93, 0x00, 0x87, 0x02, 0x24, 0x97, 0xCC, 0x3F, 0xA5, 0x04},
   {0x51, 0xD0, 0x6D, 0x9B, 0x5E, 0x93, 0xF3, 0x65, 0x32, 0xD1, 0xB2, 0x3E, 0xC1, 0x40, 0x98, 0x2A, 0xDD, 0x0E, 0xD1, 0x09, 0x9E, 0x5B, 0x4D, 0x8F, 0x7C, 0x3A, 0x36, 0x0B, 0x51, 0xE7, 0x30, 0x3E},
   {0xD3, 0x90, 0x39, 0x0B, 0x37, 0xA7, 0x0E, 0xF6, 0x79, 0xD4, 0xDB, 0xE4, 0xCD, 0x1F, 0xF6, 0x31, 0xCF, 0xE6, 0x18, 0xF1, 0xC5, 0xA0, 0x57, 0xE9, 0x1C, 0xF8, 0x97, 0x0E, 0x10, 0xF4, 0x76, 0x2F}},
  {{0xAA, 0x25, 0x2F, 0xB6, 0xC8, 0xA4, 0x05, 0xD8, 0x96, 0x8A, 0x7E, 0x16, 0x7A, 0x68, 0x08, 0x03, 0xD7, 0x06, 0xF8, 0xF8, 0x9C, 0x3F, 0x99, 0x4A, 0x39, 0x38, 0xC1, 0xD4, 0x97, 0xAA, 0x84, 0x64},
   {0xEE, 0xDA, 0x23, 0x12, 0x4E, 0x9F, 0x9D, 0xB6, 0x5B, 0xED, 0x64, 0x24, 0xFF, 0xBC, 0x60, 0x02, 0x97, 0xC2, 0x7C, 0x74, 0xA2, 0x68, 0x23, 0xEC, 0xE7, 0xC9, 0xCF, 0x3D, 0x99, 0x50, 0x38, 0x20},
   {0x0B, 0x95, 0x49, 0xB5, 0xC0, 0xAF, 0xEF, 0xE4, 0x54, 0x43, 0x32, 0x3B, 0xC4, 0xFA, 0x4C, 0x93, 0x33, 0x50, 0x34, 0xEF, 0x55, 0x53, 0x59, 0x33, 0x0D, 0xE8, 0xF1, 0x65, 0xD0, 0xF2, 0x06, 0x3B}},
  {{0xB2, 0x4B, 0x2D, 0x4A, 0x81, 0xD1, 0xF1, 0x83, 0xBD, 0x72, 0x5B, 0xF6, 0x42, 0x87, 0xE3, 0xE6, 0x75, 0xCF, 0xC8, 0x03, 0xAB, 0xF7, 0x6E, 0xED, 0xA9, 0x36, 0x8A, 0x16, 0x5F, 0xE9, 0x2A, 0x78},
   {0x34, 0x7F, 0x93, 0xDB, 0x13, 0x30, 0xD0, 0xB7, 0x7F, 0x4A, 0x5A, 0xF3, 0xE4, 0xEC, 0x63, 0x93, 0x7A, 0xDC, 0x3A, 0xA9, 0x17, 0x5F, 0x44, 0x9C, 0x37, 0x52, 0x78, 0x02, 0xB6, 0xBA, 0x38, 0x6A},
   {0xC9, 0xAE, 0x03, 0xB2, 0x72, 0x30, 0xE9, 0xEA, 0xC0, 0x66, 0x50, 0x00, 0x80, 0xD7, 0xBC, 0xB1, 0x48, 0xCF, 0xD3, 0x78, 0xA1, 0x47, 0x02, 0x33, 0x90, 0x49, 0xEC, 0x70, 0x3B, 0xF1, 0x67, 0x29}},
};

volatile unsigned long overflow_count = 0;
ISR(TIMER1_OVF_vect) {overflow_count++;}

int main()
{
  Serial.begin(500000);
  Serial.println();

  //Example scalar (saved using little endian in hex 32 byte array) 3618502788666131106986593281521497120428558180689953803000975469142727125494 = 0x80000000000000000000000000000000a6f7cfbf0a86b3b727e1f776e7ae9f6
  unsigned char scalar[32] = {0xF6,	0xE9,	0x7A,	0x6E,	0x77,	0x1F,	0x7E,	0x72,	0x3B,	0x6B,	0xA8,	0xF0,	0xFB,	0x7C,	0x6F,	0x0A,	0x00,	0x00,	0x00,	0x00,	0x00,	0x00,	0x00,	0x00,	0x00,	0x00,	0x00,	0x00,	0x00,	0x00,	0x00,	0x08};

  field_element Gx = {{0x1A, 0xD5, 0x25, 0x8F, 0x60, 0x2D, 0x56, 0xC9, 0xB2, 0xA7, 0x25, 0x95, 0x60, 0xC7, 0x2C, 0x69, 0x5C, 0xDC, 0xD6, 0xFD, 0x31, 0xE2, 0xA4, 0xC0, 0xFE, 0x53, 0x6E, 0xCD, 0xD3, 0x36, 0x69, 0x21}};
  field_element Gy = {{0x58, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66}};
  field_element Gz = {{0x01}};
  field_element temp_scalar;

  field_element xr, yr, zr;

  cli();
  TCCR1A = 0;
  TCCR1B = bit(CS10);
  TCNT1 = 0;
  overflow_count = 0;

  TIMSK1 |= (1 << TOIE1);
  sei();

  scalar[0] &= 248;
  scalar[31] &= 127;
  scalar[31] |= 64;

  for (int i = 0; i < 32; i++){temp_scalar.Ed[i] = scalar[i];}
  for (int i = 0; i < 7; i++){Ed25519_scalar_sub_order(&temp_scalar);}
  for (int i = 0; i < 32; i++){scalar[i] = temp_scalar.Ed[i];}

  windowed_scalar_mul(&Gx, &Gy, &Gz, scalar, PRECOMPUTED_POINTS);

  cli();
  unsigned long final_cycles = TCNT1;
  sei();

  unsigned long total_cycles = (overflow_count * 65536UL) + final_cycles;

  Serial.print("Number of cycles = ");
  Serial.println(total_cycles);

  Serial.print("Time requirement = ");
  Serial.print((float)total_cycles / 16);
  Serial.println(" Microseconds");

  Serial.print("Time requirement = ");
  Serial.print((float)total_cycles / 16000);
  Serial.println(" Millisecond");

  Serial.print("Time requirement = ");
  Serial.print((float)total_cycles / 16000000);
  Serial.println(" second");
  
  Serial.print("Affine x-coordinate: ");
  for (int i = 0; i < 32; i++)
  {
    Serial.print(Gx.Ed[i], HEX);
  }
  Serial.println();
}

void windowed_scalar_mul(field_element *xr, field_element *yr, field_element *zr, unsigned char scalar[32], const field_element precomputed[16][3])
{
  field_element temp_result, temp_x, temp_y, temp_z;
  unsigned char borrow;

  cli();
  borrow = scalar_sub_halforder(temp_result.Ed, scalar);
  sei();

  if (borrow == 0)
  {
    for (int i = 0; i < 32; i++){scalar[i] = temp_result.Ed[i];}

    windowed_scalar_mul(xr, yr, zr, scalar, precomputed);

    cli();
    Ed255_subp_bigint(xr->Ed, xr->Ed);
    Ed255_subp_bigint(yr->Ed, yr->Ed);
    sei();
    return;
  }
  unsigned char window_value = (scalar[31] << 2) | (scalar[30] >> 6);
  memcpy_P(xr->Ed, precomputed[window_value][0].Ed, 32);
  memcpy_P(yr->Ed, precomputed[window_value][1].Ed, 32);
  memcpy_P(zr->Ed, precomputed[window_value][2].Ed, 32);

  for (int j = 5; j >= 0; j--) {double_point(xr, yr, zr);}

  window_value = scalar[30] & 0x3F;

  memcpy_P(temp_x.Ed, precomputed[window_value][0].Ed, 32);
  memcpy_P(temp_y.Ed, precomputed[window_value][1].Ed, 32);
  memcpy_P(temp_z.Ed, precomputed[window_value][2].Ed, 32);

  add_points(xr, yr, zr, &temp_x, &temp_y, &temp_z);

  for (int i = 9; i >= 0; i--)
  {
    for (int j = 5; j >= 0; j--) {double_point(xr, yr, zr);}

    window_value = scalar[(i*3)+2] >> 2;   

    memcpy_P(temp_x.Ed, precomputed[window_value][0].Ed, 32);
    memcpy_P(temp_y.Ed, precomputed[window_value][1].Ed, 32);
    memcpy_P(temp_z.Ed, precomputed[window_value][2].Ed, 32);

    add_points(xr, yr, zr, &temp_x, &temp_y, &temp_z);

    for (int j = 5; j >= 0; j--) {double_point(xr, yr, zr);}

    window_value = ((scalar[(i*3)+2] & 0x03) << 4) | (scalar[(i*3)+1] >> 4);

    memcpy_P(temp_x.Ed, precomputed[window_value][0].Ed, 32);
    memcpy_P(temp_y.Ed, precomputed[window_value][1].Ed, 32);
    memcpy_P(temp_z.Ed, precomputed[window_value][2].Ed, 32);

    add_points(xr, yr, zr, &temp_x, &temp_y, &temp_z);

    for (int j = 5; j >= 0; j--) {double_point(xr, yr, zr);}

    window_value = ((scalar[(i*3)+1] & 0x0F)<<2) | (scalar[i*3]>>6);

    memcpy_P(temp_x.Ed, precomputed[window_value][0].Ed, 32);
    memcpy_P(temp_y.Ed, precomputed[window_value][1].Ed, 32);
    memcpy_P(temp_z.Ed, precomputed[window_value][2].Ed, 32);

    add_points(xr, yr, zr, &temp_x, &temp_y, &temp_z);

    for (int j = 5; j >= 0; j--) {double_point(xr, yr, zr);}

    //step 4. 5th window --> scalar[27] & 3F
    window_value = scalar[i*3] & 0x3F;

    memcpy_P(temp_x.Ed, precomputed[window_value][0].Ed, 32);
    memcpy_P(temp_y.Ed, precomputed[window_value][1].Ed, 32);
    memcpy_P(temp_z.Ed, precomputed[window_value][2].Ed, 32);

    add_points(xr, yr, zr, &temp_x, &temp_y, &temp_z);
  }

  M_Inverse_Z(zr, zr);
  mul(xr, xr, zr);
  in_range(xr);
}

void double_point(field_element *xr, field_element *yr, field_element *zr)
{
  field_element B, C, D, E, F, H, J;
  field_element temp1;
  add(&temp1, xr, yr);
  square(&B, &temp1);
  square(&C, xr);
  square(&D, yr);
  mul(&E, &a, &C);
  add(&F, &E, &D);
  square(&H, zr);
  add(&temp1, &H, &H);
  sub(&J, &F, &temp1);
  sub(&temp1, &B, &C);
  sub(&temp1, &temp1, &D);
  mul(xr, &temp1, &J);
  sub(&temp1, &E, &D);
  mul(yr, &F, &temp1);
  mul(zr, &F, &J);
}

void add_points(field_element *xr, field_element *yr, field_element *zr, const field_element *px, const field_element *py, const field_element *pz)
{
  field_element A, B, C, D, E, F, G, temp1, temp2;
  mul(&A, zr, pz);
  square(&B, &A);
  mul(&C, xr, px);
  mul(&D, yr, py);
  mul(&E, &C, &D);
  mul(&E, &E, &d);
  sub(&F, &B, &E);
  add(&G, &B, &E);
  add(&temp1, xr, yr);  
  add(&temp2, px, py);
  mul(&temp1, &temp1, &temp2);
  sub(&temp1, &temp1, &C);
  sub(&temp1, &temp1, &D);
  mul(&temp1, &F, &temp1);
  mul(xr, &A, &temp1);
  mul(&temp1, &a, &C);
  sub(&temp1, &D, &temp1);
  mul(&temp1, &G, &temp1);
  mul(yr, &A, &temp1);
  mul(zr, &F, &G);
}

void M_Inverse_Z(field_element *r, const field_element *x)
{
  field_element z2;
  field_element z11;
  field_element z2_10_0;
  field_element z2_50_0;
  field_element z2_100_0;
  field_element t0;
  field_element t1;
  unsigned char i;

  square(&z2,x);
  square(&t1,&z2);
  square(&t0,&t1);
  mul(&z2_10_0,&t0,x);
  mul(&z11,&z2_10_0,&z2);
  square(&t0,&z11);
  mul(&z2_10_0,&t0,&z2_10_0);
  square(&t0,&z2_10_0);
  square(&t1,&t0);
  square(&t0,&t1);
  square(&t1,&t0);
  square(&t0,&t1);
  mul(&z2_10_0,&t0,&z2_10_0);
  square(&t0,&z2_10_0);
  square(&t1,&t0);
  for (i = 2;i < 10;i += 2){ square(&t0,&t1); square(&t1,&t0); }
  mul(&z2_50_0,&t1,&z2_10_0);
  square(&t0,&z2_50_0);
  square(&t1,&t0);
  for (i = 2;i < 20;i += 2) { square(&t0,&t1); square(&t1,&t0); }
  mul(&t0,&t1,&z2_50_0);
  square(&t1,&t0);
  square(&t0,&t1);
  for (i = 2;i < 10;i += 2) { square(&t1,&t0); square(&t0,&t1); }
  mul(&z2_50_0,&t0,&z2_10_0);
  square(&t0,&z2_50_0);
  square(&t1,&t0);
  for (i = 2;i < 50;i += 2) { square(&t0,&t1); square(&t1,&t0); }
  mul(&z2_100_0,&t1,&z2_50_0);
  square(&t1,&z2_100_0);
  square(&t0,&t1);
  for (i = 2;i < 100;i += 2) { square(&t1,&t0); square(&t0,&t1); }
  mul(&t1,&t0,&z2_100_0);
  square(&t0,&t1);
  square(&t1,&t0);
  for (i = 2;i < 50;i += 2) { square(&t0,&t1); square(&t1,&t0); }
  mul(&t0,&t1,&z2_50_0);
  square(&t1,&t0);
  square(&t0,&t1);
  square(&t1,&t0);
  square(&t0,&t1);
  square(&t1,&t0);
  mul(r,&t1,&z11);
}

void in_range(field_element *r)
{
  unsigned char bwr;
  field_element temp_result;
  bwr = Ed_num_sub_prime(temp_result.Ed, r->Ed);
  flip_if(r,&temp_result,1-bwr);
}

void flip_if(field_element *r, const field_element *x, unsigned char b)
{
  unsigned char i;
  unsigned long mask = b;
  mask = -mask;
  for(i=0;i<32;i++)
  {
    r->Ed[i] ^= mask & (x->Ed[i] ^ r->Ed[i]);
  }
}

void mul(field_element *r, const field_element *x, const field_element *y)
{
  unsigned char t[64];
  cli();
  Ed_mul(t,x->Ed,y->Ed);
  sei();
  modulo(r,t);
}

void square(field_element *r, const field_element *x)
{
  unsigned char t[64];
  cli();
  Ed25519_square(t,x->Ed);
  sei();
  modulo(r,t);
}

void Ed25519_scalar_sub_order(field_element *r)
{
  unsigned char bwr;
  field_element tempResult;
  cli();
  bwr = scalar_sub_order(tempResult.Ed, r->Ed);
  sei();
  flip_if(r,&tempResult,1-bwr);
}